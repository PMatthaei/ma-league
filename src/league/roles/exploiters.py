from typing import Tuple

from league.components.payoff import Payoff
from league.roles.players import Player
import numpy as np

from league.components.pfsp import prioritized_fictitious_self_play
from learners.learner import Learner


class MainExploiter(Player):

    def __init__(self, player_id: int, payoff: Payoff):
        super().__init__(player_id, payoff)
        self._checkpoint_step = 0

    def get_match(self) -> Tuple[Player, bool]:
        """

        :return:
        """
        from league.roles.players import MainPlayer
        main_agents = [
            player for player in self._payoff.players
            if isinstance(player, MainPlayer)
        ]
        opponent = np.random.choice(main_agents)

        if self._payoff[self.id_, opponent.id_] > 0.1:
            return opponent, True

        from league.roles.players import HistoricalPlayer
        historical = [
            player.id_ for player in self._payoff.players
            if isinstance(player, HistoricalPlayer) and player.parent == opponent
        ]
        win_rates = self._payoff[self.id_, historical]

        if len(historical) == 0:  # TODO
            return opponent, True

        chosen = np.random.choice(historical, p=prioritized_fictitious_self_play(win_rates, weighting="variance"))
        return self._payoff.players[chosen], True

    def checkpoint(self):
        """

        :return:
        """
        self._checkpoint_step = self.learner.trained_steps
        return self._create_checkpoint()

    def ready_to_checkpoint(self):
        """

        :return:
        """
        steps_passed = self.learner.trained_steps - self._checkpoint_step
        if steps_passed < 2e9:
            return False
        from league.roles.players import MainPlayer
        main_agents = [
            player.id_ for player in self._payoff.players
            if isinstance(player, MainPlayer)
        ]
        win_rates = self._payoff[self.id_, main_agents]
        return win_rates.min() > 0.7 or steps_passed > 4e9


class LeagueExploiter(Player):

    def __init__(self, player_id: int, payoff: Payoff):
        super().__init__(player_id, payoff)
        self._checkpoint_step = 0

    def get_match(self) -> Tuple[Player, bool]:
        """

        :return:
        """
        from league.roles.players import HistoricalPlayer

        historical = [
            player.id_ for player in self._payoff.players
            if isinstance(player, HistoricalPlayer)
        ]
        win_rates = self._payoff[self.id_, historical]

        if len(historical) == 0:  # TODO
            return None, None

        chosen = np.random.choice(historical, p=prioritized_fictitious_self_play(win_rates, weighting="linear_capped"))
        return self._payoff.players[chosen], True

    def checkpoint(self):
        """

        :return:
        """
        # if np.random.random() < 0.25: TODO: reset at random to initial weights (when are they initial?)
        #     self.learner.set_weights(self._initial_weights)
        self._checkpoint_step = self.learner.trained_steps
        return self._create_checkpoint()

    def ready_to_checkpoint(self):
        """

        :return:
        """
        steps_passed = self.learner.trained_steps - self._checkpoint_step
        if steps_passed < 2e9:
            return False
        from league.roles.players import HistoricalPlayer
        historical = [
            player.id_ for player in self._payoff.players
            if isinstance(player, HistoricalPlayer)
        ]
        win_rates = self._payoff[self.id_, historical]
        return win_rates.min() > 0.7 or steps_passed > 4e9
